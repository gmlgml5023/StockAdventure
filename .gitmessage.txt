################
# <타입> : <제목> 의 형식으로 제목을 아래 공백줄에 작성
# 제목은 50자 이내 / 변경사항이 "무엇"인지 명확히 작성 / 끝에 마침표 금지
# 예) feat: 로그인 기능 추가

# 바로 아래 공백은 지우지 마세요 (제목과 본문의 분리를 위함)

################
# 본문(구체적인 내용)을 아랫줄에 작성
# 여러 줄의 메시지를 작성할 땐 "-"로 구분 (한 줄은 72자 이내)

################
# 꼬릿말(footer)을 아랫줄에 작성 (현재 커밋과 관련된 이슈 번호 추가 등)
# 이슈 번호 추가되면 track됨
# <타입>: 이슈번호
# 한줄에 하나의 타입만 작성
# 예) 
# Fixes: #45 
# Related to: #34, #23

################
# 제목 타입 종류
# feat: 새로운 기능 추가
# design: CSS 등 사용자 UI 디자인 변경
# fix: 버그 수정
# docs: 문서 수정 (README.md 수정 등)
# style: 스타일 관련 기능(코드 포맷팅, 세미콜론 누락, 코드 자체의 변경이 없는 경우)
# refactoring: 코드 리팩토링
# test: 테스트 코드 추가 (test 폴더 내부의 변경)
# chore: 빌드 업무 수정,package.json의 변경 수정,dotenv의 요소 변경,.gitignore 수정 등 -> production code와 무관한 부분
# comment: 필요한 주석 추가 및 변경
# remove: 파일, 폴더 삭제
# rename: 파일, 폴더명 수정
################
# 꼬릿말 타입 종류
# fixes: 이슈 수정중 (아직 해결되지 않은 경우)
# resolves: 이슈를 해결했을 때 사용 (commit시 이슈 자동 종료)
# ref: 참고할 이슈가 있을 때 사용
# related to: 해당 커밋에 관련된 이슈번호 (아직 해결되지 않은 경우)
################
# commit 작성 예시
# feat: "로그인 기능 구현"

# 로그인 시 JWT 발급

# fesolves: #111
# ref: #122
# related to: #30, #50
################
